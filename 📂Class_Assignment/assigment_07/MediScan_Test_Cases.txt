MediScan AI Pro Test Cases
=========================
Version: Updated with Gemini AI Integration
Date: April 26, 2025
Author: Grok 3 (assisting Areeba Irfan)
Purpose: Test the functionality of MediScan AI Pro, focusing on Gemini AI diagnosis, history persistence, UI features, and error handling.
Credit: Built with ‚ù§Ô∏è by Areeba Irfan

Prerequisites
-------------
1. Save the updated `app.py` to `D:\PIAIC\website\app.py`.
2. Set Gemini API key:
   - Run in Command Prompt: `set API_KEY=your_gemini_api_key`
3. Install dependencies:
   - `pip install streamlit pillow pandas numpy google-generativeai`
4. Ensure write permissions:
   - `icacls D:\PIAIC\website /grant Everyone:F`
   - `icacls D:\PIAIC\website\Uploads /grant Everyone:F`
   - `icacls D:\PIAIC\website\logs /grant Everyone:F`
5. Prepare test images (JPEG/PNG, <20MB):
   - Eye image (e.g., eye.jpg, showing clear eye features)
   - Skin image (e.g., skin.jpg, showing skin texture)
   - Other image (e.g., hand.jpg, showing a hand)
6. Run the app:
   - `cd D:\PIAIC\website`
   - `streamlit run app.py`
   - Open `http://localhost:8501`

Test Cases
----------

### Test Case 1: App Startup
**Objective**: Verify the app starts without errors.
**Steps**:
1. Run `streamlit run app.py`.
2. Open `http://localhost:8501`.
3. Check if the login/register page loads with title "MediScan AI Pro".
**Expected Outcome**:
- App loads without tracebacks in the terminal.
- Login/register page displays with options "Login" and "Register".
- No `NameError` for `‡§â‡§™` (fixed in `check_session`).
**Debug Check**:
- Terminal: No errors like `NameError: name '‡§â‡§™' is not defined`.
- UI: Title and radio buttons appear.

### Test Case 2: User Registration
**Objective**: Test user registration functionality.
**Steps**:
1. On the login/register page, select "Register".
2. Enter:
   - Username: `testuser`
   - Password: `test123456`
   - Confirm Password: `test123456`
3. Click "Register".
**Expected Outcome**:
- Success message: "Registration successful! You can now log in."
- Redirects to login form.
- `user_data.json` created in `D:\PIAIC\website` with hashed password.
**Debug Check**:
- Log file (`D:\PIAIC\website\logs\mediscan_20250426.log`):
  - `User: testuser - Action: Registered`
- Command: `type D:\PIAIC\website\user_data.json`
  - Contains `{"testuser": "<hashed_password>"}`

### Test Case 3: User Login
**Objective**: Test user login functionality.
**Steps**:
1. On the login/register page, select "Login".
2. Enter:
   - Username: `testuser`
   - Password: `test123456`
3. Click "Login".
**Expected Outcome**:
- Success message: "Welcome, testuser!"
- Sidebar shows options like "Diagnose", "History", etc.
- UI updates to show logged-in state.
**Debug Check**:
- Log file: `User: testuser - Action: Logged in`
- UI: Sidebar has multiple navigation options.

### Test Case 4: Gemini AI Diagnosis (Eye)
**Objective**: Test Gemini AI diagnosis for an eye image.
**Steps**:
1. Navigate to "Diagnose".
2. Upload a clear eye image (e.g., `eye.jpg`).
3. Select "Eye" from the body part dropdown.
4. Click "Diagnose".
**Expected Outcome**:
- Debug message: `Debug: Image saved at: D:\PIAIC\website\Uploads\eye.jpg`
- Debug message: `Debug: Image processing completed successfully`
- Debug message: `Debug: Result=<disease>, Description=..., Treatment=..., Medication=...`
- Success message: `üßæ Result: <disease>` (e.g., Conjunctivitis)
- Disease info displayed (diagnosis, description, treatment, medication).
- Treatment plan displayed.
- Reminders set: "üîî Reminders set for doctor visit, medication, and rest."
- `history.json` updated with new record.
**Debug Check**:
- Log file:
  - `Gemini diagnosis for Eye: {...}`
  - `Added to history: {...}`
  - `Saved 1 history records to history.json`
- Command: `type D:\PIAIC\website\history.json`
  - Contains:
    ```json
    [{
        "timestamp": "2025-04-26 ...",
        "file": "eye.jpg",
        "body_part": "Eye",
        "diagnosis": "<disease>",
        "treatment": "...",
        "medication": "..."
    }]
    ```
- UI: Check debug messages for Gemini response.

### Test Case 5: Gemini AI Diagnosis (Skin)
**Objective**: Test Gemini AI diagnosis for a skin image.
**Steps**:
1. Navigate to "Diagnose".
2. Upload a clear skin image (e.g., `skin.jpg`).
3. Select "Skin" from the body part dropdown.
4. Click "Diagnose".
**Expected Outcome**:
- Similar to Test Case 4, but for skin (e.g., Result: Eczema).
- `history.json` has two records (from Test Case 4 and this).
**Debug Check**:
- Log file: `Gemini diagnosis for Skin: {...}`
- Command: `type D:\PIAIC\website\history.json`
  - Contains two records.
- UI: Debug message shows skin-related diagnosis.

### Test Case 6: History Page
**Objective**: Verify history records display correctly.
**Steps**:
1. Navigate to "History".
2. Check if records from Test Cases 4 and 5 appear.
3. Expand a record to view details.
**Expected Outcome**:
- Debug message: `Debug: History length: 2`
- Records displayed with timestamp, body part, diagnosis, treatment, medication, and image.
- Images load (if `Uploads\eye.jpg` and `skin.jpg` exist).
- No errors like `Error loading image`.
**Debug Check**:
- UI: Check `Debug: History contents: [...]`
- Log file: No `Error displaying image ...` entries.
- If images missing: Warning `Image file not found: ...`.

### Test Case 7: Language Switching
**Objective**: Test switching to Urdu.
**Steps**:
1. Navigate to "Settings".
2. Select "Urdu" from the language dropdown.
3. Click "Save Settings".
4. Navigate to "Diagnose" and check UI text.
**Expected Outcome**:
- Success message: "Language changed to Urdu"
- UI text changes (e.g., "Diagnose" becomes "ÿ™ÿ¥ÿÆ€åÿµ ⁄©ÿ±€å⁄∫").
- Sidebar and buttons reflect Urdu translations.
**Debug Check**:
- Log file: `User: testuser - Action: Changed language to Urdu`
- UI: Verify text like "ÿ™ÿ¥ÿÆ€åÿµ€å ⁄à€åÿ¥ ÿ®Ÿàÿ±⁄à" for "Diagnosis Dashboard".

### Test Case 8: Theme Switching
**Objective**: Test switching to Dark theme.
**Steps**:
1. Navigate to "Settings".
2. Select "Dark" from the theme dropdown.
3. Click "Save Settings".
**Expected Outcome**:
- Success message: "Theme changed to Dark"
- Background turns dark, text turns white.
- UI elements (inputs, buttons) adapt to dark theme.
**Debug Check**:
- Log file: `User: testuser - Action: Changed theme to Dark`
- UI: Visually confirm dark background.

### Test Case 9: Error Handling (Invalid Image)
**Objective**: Test handling of invalid image uploads.
**Steps**:
1. Navigate to "Diagnose".
2. Upload a non-image file (e.g., `test.txt`).
3. Click "Diagnose".
**Expected Outcome**:
- Error message: "Invalid image file."
- No diagnosis generated.
- No new `history.json` record.
**Debug Check**:
- Log file: `Invalid image file: test.txt`
- Command: `type D:\PIAIC\website\history.json`
  - No new records added.

### Test Case 10: Error Handling (Gemini API Failure)
**Objective**: Test fallback when Gemini API fails.
**Steps**:
1. Temporarily unset API key:
   - `set API_KEY=`
2. Navigate to "Diagnose".
3. Upload `eye.jpg`, select "Eye", click "Diagnose".
4. Reset API key after testing:
   - `set API_KEY=your_gemini_api_key`
**Expected Outcome**:
- Error message: "Gemini API error: ... Using fallback diagnosis."
- Fallback diagnosis (random) displayed (e.g., Result: Cataract).
- Record saved to `history.json`.
**Debug Check**:
- Log file:
  - `Failed to initialize Gemini client: ...`
  - `Added to history: {...}`
- UI: Debug message shows random diagnosis.

Troubleshooting
---------------
1. **Gemini API Errors**:
   - Check `API_KEY`:
     - `echo %API_KEY%`
   - Verify quota in Google AI Studio.
   - Log file: Look for `Gemini API error: ...`.
2. **History Not Saving**:
   - Command: `dir D:\PIAIC\website\history.json`
   - Log file: Check for `Failed to save history to history.json: ...`.
   - Reapply permissions: `icacls D:\PIAIC\website /grant Everyone:F`.
3. **Diagnosis Issues**:
   - Share debug output: `Debug: Result=...`.
   - Note if diagnosis doesn‚Äôt match expected disease.
4. **Logs**:
   - Open `D:\PIAIC\website\logs\mediscan_20250426.log`.
   - Search for errors or `Gemini diagnosis for ...`.

Feedback
--------
After testing:
1. Confirm if `history.json` saves records.
2. Share debug output from "Diagnose" (e.g., `Debug: Result=...`).
3. Note any errors or unexpected diagnoses.
4. Provide log entries or tracebacks.
5. Verify language/theme switching.

Contact
-------
For issues, contact your AI assistant (Grok 3) with test results.
Credit: Areeba Irfan for MediScan AI Pro.